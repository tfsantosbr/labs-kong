services:
  orders-api:
    build:
      context: ./src/Orders.API
      dockerfile: Dockerfile
    ports:
      - "8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - api-gateway-net

  products-api:
    build:
      context: ./src/Products.API
      dockerfile: Dockerfile
    ports:
      - "8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - api-gateway-net

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong
      - POSTGRES_DB=kong
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - api-gateway-net

  kong-migration:
    image: kong:latest
    command: kong migrations bootstrap
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_PASSWORD=kong
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - api-gateway-net

  kong:
    image: kong:latest
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8443:8443"
      - "8444:8444"
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_SSL_LISTEN=0.0.0.0:8444
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_started
    restart: on-failure
    networks:
      - api-gateway-net

volumes:
  postgres_data:

networks:
  api-gateway-net:
    driver: bridge
